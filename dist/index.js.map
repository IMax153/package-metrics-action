{"version":3,"sources":["../src/utils/config.ts","../src/Git.ts","../src/Rollup.ts","../src/index.ts"],"names":["Config","GitError","Data","Effect","SimpleGit","ref","git","constVoid","nodeResolve","esbuild","terser","input","bundle","Api","Stream","NodeStream","createGzip","Console","ConfigProvider","Layer","NodeRuntime"],"mappings":"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","file":"index.js","sourcesContent":["import { Config } from \"effect\"\n\nexport const input = (name: string) => Config.nested(Config.nonEmptyString(name), \"input\")\n\nexport const inputSecret = (name: string) => Config.nested(Config.redacted(Config.nonEmptyString(name)), \"input\")\n","import { Config, Data, Effect } from \"effect\"\nimport { constVoid } from \"effect/Function\"\nimport * as SimpleGit from \"simple-git\"\nimport { input } from \"./utils/config\"\n\nexport class GitError extends Data.TaggedError(\"GitError\")<{\n  readonly cause: SimpleGit.GitError\n}> {\n  get message() {\n    return this.cause.message\n  }\n}\n\nexport class Git extends Effect.Service<Git>()(\"app/Git\", {\n  effect: Effect.gen(function*() {\n    const githubActor = Config.nonEmptyString(\"github_actor\")\n\n    const githubActorEmail = githubActor.pipe(\n      Config.map((actor) => `${actor}@users.noreply.github.com`)\n    )\n\n    const userName = yield* input(\"git_user\").pipe(\n      Config.orElse(() => githubActor)\n    )\n\n    const userEmail = yield* input(\"git_email\").pipe(\n      Config.orElse(() => githubActorEmail)\n    )\n\n    const clone = Effect.fn(\"Git.clone\")(\n      (url: string, directory: string) =>\n        Effect.tryPromise({\n          try: () => SimpleGit.simpleGit().clone(url, directory),\n          catch: (cause) => new GitError({ cause: cause as any })\n        })\n    )\n\n    const open = Effect.fn(\"Git.open\")(\n      function*(directory: string, ref: string) {\n        const git = SimpleGit.simpleGit(directory)\n\n        const use = Effect.fn(\"Git.use\", { attributes: { directory } })(\n          <A>(f: (git: SimpleGit.SimpleGit) => Promise<A>) =>\n            Effect.tryPromise({\n              try: () => f(git),\n              catch: (cause) => new GitError({ cause: cause as any })\n            })\n        )\n\n        const getCheckoutInfo = Effect.fn(\"Git.getCheckoutInfo\")(\n          function*(ref: string) {\n            const lowerRef = ref.toLowerCase()\n            if (lowerRef.startsWith(\"refs/heads/\")) {\n              const branch = ref.substring(\"refs/heads/\".length)\n              return { ref: branch, startPoint: `refs/remotes/origin/${branch}` }\n            }\n            if (lowerRef.startsWith(\"refs/pull/\")) {\n              const branch = ref.substring(\"refs/pull/\".length)\n              return { ref: `refs/remotes/pull/${branch}` }\n            }\n            if (lowerRef.startsWith(\"refs/tags/\")) {\n              return { ref }\n            }\n            if (lowerRef.startsWith(\"refs/\")) {\n              return { ref }\n            }\n            // unqualified ref, check for matching branch or tag\n            const branches = yield* use((git) => git.branch([\"--list\", \"--remote\", `origin/${ref}`]))\n            if (branches.all.length > 0) {\n              return { ref, startPoint: `refs/remotes/origin/${ref}` }\n            }\n            const tags = yield* use((git) => git.tags([\"--list\", ref]))\n            if (tags.all.length > 0) {\n              return { ref: `refs/tags/${ref}` }\n            }\n            return yield* new GitError({\n              cause: new SimpleGit.GitError(undefined, `Could not find matching ref for ${ref}`)\n            })\n          }\n        )\n\n        yield* use((git) =>\n          git\n            .addConfig(\"user.name\", userName)\n            .addConfig(\"user.email\", userEmail)\n        )\n\n        const info = yield* getCheckoutInfo(ref)\n        yield* use((git) =>\n          info.startPoint\n            ? git.checkoutBranch(info.ref, info.startPoint)\n            : git.checkout(info.ref).then(constVoid)\n        )\n\n        return {\n          use,\n          path: directory\n        } as const\n      }\n    )\n\n    return {\n      clone,\n      open\n    } as const\n  })\n}) {}\n","import { NodeStream } from \"@effect/platform-node\"\nimport { nodeResolve } from \"@rollup/plugin-node-resolve\"\nimport terser from \"@rollup/plugin-terser\"\nimport { Console, Data, Effect, Stream } from \"effect\"\nimport { createGzip } from \"node:zlib\"\nimport * as Api from \"rollup\"\nimport esbuild from \"rollup-plugin-esbuild\"\n\nexport class RollupError extends Data.TaggedError(\"RollupError\")<{\n  readonly cause: unknown\n}> {}\n\nexport class Rollup extends Effect.Service<Rollup>()(\"app/Rollup\", {\n  effect: Effect.gen(function*() {\n    const onwarn: Api.WarningHandlerWithDefault = (warning, next) => {\n      if (warning.code === \"THIS_IS_UNDEFINED\") {\n        return\n      }\n      next(warning)\n    }\n\n    const plugins: Api.InputPluginOption = [\n      nodeResolve(),\n      esbuild(),\n      terser({ mangle: true, compress: true })\n    ]\n\n    const bundle = Effect.fn(\"Rollup.bundle\")(\n      function*(input: string) {\n        const bundle = yield* Effect.tryPromise({\n          try: () => Api.rollup({ input, onwarn, plugins }),\n          catch: (cause) => new RollupError({ cause })\n        })\n\n        const encoder = new TextEncoder()\n\n        const chunk = yield* Effect.tryPromise({\n          try: () => bundle.generate({ format: \"cjs\" }),\n          catch: (cause) => new RollupError({ cause })\n        }).pipe(Effect.map(({ output }) => output[0]))\n\n        const buffer = encoder.encode(chunk.code)\n\n        const sizeInBytes = yield* Stream.succeed(buffer).pipe(\n          NodeStream.pipeThroughSimple(() => createGzip()),\n          Stream.runFold(0, (size, bytes) => size + bytes.length)\n        )\n\n        yield* Console.log({ ...chunk, sizeInBytes })\n      }\n    )\n\n    return {\n      bundle\n    } as const\n  })\n}) {}\n","import { NodeRuntime } from \"@effect/platform-node\"\nimport { Config, ConfigProvider, Effect, Layer } from \"effect\"\nimport { Git } from \"./Git\"\nimport { Rollup } from \"./Rollup\"\nimport { input } from \"./utils/config\"\n\nconst ConfigProviderLayer = ConfigProvider.fromEnv().pipe(\n  ConfigProvider.constantCase,\n  Layer.setConfigProvider\n)\n\nconst main = Effect.gen(function*() {\n  const eventName = yield* Config.nonEmptyString(\"GITHUB_EVENT_NAME\")\n\n  if (eventName !== \"pull_request\") {\n    return yield* Effect.dieMessage(\"Package metrics can only be computed for pull requests\")\n  }\n\n  const repository = yield* Config.nonEmptyString(\"GITHUB_REPOSITORY\")\n  const baseRef = input(\"base_ref\").pipe(\n    Config.orElse(() => Config.nonEmptyString(\"GITHUB_BASE_REF\"))\n  )\n  const headRef = input(\"head_ref\").pipe(\n    Config.orElse(() => Config.nonEmptyString(\"GITHUB_HEAD_REF\"))\n  )\n\n  const git = yield* Git\n\n  const baseDir = yield* git.clone(`https://github.com/${repository}.git`, \"base\")\n  const headDir = yield* git.clone(`https://github.com/${repository}.git`, \"head\")\n})\n\nconst MainLayer = Layer.mergeAll(\n  Git.Default,\n  Rollup.Default\n).pipe(Layer.provide(ConfigProviderLayer))\n\nmain.pipe(\n  Effect.provide(MainLayer),\n  NodeRuntime.runMain\n)\n"]}